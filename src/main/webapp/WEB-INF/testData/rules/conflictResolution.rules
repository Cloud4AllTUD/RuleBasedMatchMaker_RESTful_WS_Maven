	@prefix c4a: <http://rbmm.org/schemas/cloud4all/0.1/>.
	@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.

[NATC_RES:
	(?if c4a:hasConflict ?conflict)
	(?if rdf:type c4a:InferredConfiguration)
	(?if c4a:hasPrefs ?pref)
		
	(?conflict rdf:type c4a:Conflict)
	(?conflict c4a:name "NoATConflict")
	(?conflict c4a:refersTo ?pref_id)

	(?pref c4a:id ?pref_id)
	(?pref c4a:value ?pref_val)
	
	(?p_subst rdf:type c4a:PreferenceSubstitute)
	(?p_subst c4a:id ?pref_id)
	(?p_subst c4a:substitute ?subst)
	
	(?subst c4a:valueRange ?range)
	(?range c4a:min ?min)
	(?range c4a:max ?max)
	
	(?subst c4a:recommend ?recom)
	(?recom c4a:id ?r_id)
	(?recom c4a:value ?r_val)
		
	le(?pref_val, ?max)
	ge(?pref_val, ?min)
	
	(?solution rdf:type c4a:InstalledSolution)
	(?solution c4a:id ?sol_id)
	(?solution c4a:name ?sol_name)
	(?solution c4a:settings ?setting)
	
	(?setting rdf:type c4a:Setting)
	(?setting c4a:refersTo ?set_id)
	(?setting c4a:name ?set_name)
	
	equal(?r_id, ?set_id)
	makeSkolem(?newConfig, ?solution, ?if)
	makeSkolem(?newSetting, ?setting, ?pref)
	->
	(?if c4a:refersTo ?newConfig)
	(?newConfig c4a:refersTo ?solution)
	(?newConfig c4a:settings ?newSetting)
	(?newConfig rdf:type c4a:Configuration)
	(?newConfig c4a:id ?sol_id)
	(?newConfig c4a:name ?sol_name)
	(?newConfig c4a:isActive "true")
	
	(?newSetting rdf:type c4a:Setting)
	(?newSetting c4a:id ?r_id)
	(?newSetting c4a:name ?set_name)	
	(?newSetting c4a:value ?r_val)	
	print('**** NATC_Res *************')
	print('affected preference: ' ?pref_id)
	print('recommend: ' ?r_id)
	print('recommended value: ' ?r_val)		
	print('****************************')
]

[MATC_Res_ATRanking:
	(?conflict rdf:type c4a:Conflict)
	(?conflict c4a:refersTo ?config_a)
	(?conflict c4a:refersTo ?config_b)
	(?config_a c4a:isActive "true")
	(?config_b c4a:isActive "true")
	(?config_a c4a:refersTo ?sol_a)
	(?config_b c4a:refersTo ?sol_b)
	
	(?if rdf:type c4a:InferredConfiguration)
	noValue(?if c4a:solPreferred)
	(?if c4a:id ?if_id)	
	(?if c4a:refersTo ?config_a)
	(?if c4a:refersTo ?config_b)
	
	(?class c4a:ranking ?r)
	(?r ?sol_a ?r_a)
	(?r ?sol_b ?r_b)
	greaterThan(?r_a, ?r_b)
	notEqual(?config_a, ?config_b)
	->
	drop(4)
	(?config_b c4a:isActive "false")
	print('****************************')
	print('**** MATC_Res_ATRanking ****')
	print('Configuration activated: ' ?sol_a)
	print('Configuration deactivated: ' ?sol_b)	
	print('****************************')	
]

[MATC_Res_ATLayer:
	(?conflict rdf:type c4a:Conflict)
	(?conflict c4a:refersTo ?config_a)
	(?conflict c4a:refersTo ?config_b)
	(?config_a c4a:isActive "true")
	(?config_b c4a:isActive "true")
	(?config_a c4a:refersTo ?sol_a)
	(?config_b c4a:refersTo ?sol_b)
	
	(?if rdf:type c4a:InferredConfiguration)
	noValue(?if c4a:solPreferred)
	(?if c4a:id ?if_id)	
	(?if c4a:refersTo ?config_a)
	(?if c4a:refersTo ?config_b)
	
	(?sol_a c4a:class ?class_a)
	(?sol_b c4a:class ?class_b)
	(?class_a rdf:type c4a:AccessibilityLayer)
	(?class_b rdf:type c4a:AccessibilityLayer)	
	equal(?class_a,c4a:at)
	equal(?class_b,c4a:browser)
	notEqual(?config_a, ?config_b)
	->
	drop(4)
	(?config_b c4a:isActive "false")	
	print('**** MATC_Res_ATLayer ************')
	print('Configuration deactivated: ' ?sol_b)
	print('**********************************')	
]

[MATC_Res_ATContext:
	(?conflict rdf:type c4a:Conflict)
	(?conflict c4a:refersTo ?config_a)
	(?conflict c4a:refersTo ?config_b)
	(?config_a c4a:isActive "true")
	(?config_b c4a:isActive "true")
	(?config_a c4a:refersTo ?sol_a)
	(?config_b c4a:refersTo ?sol_b)
	
	(?if rdf:type c4a:InferredConfiguration)
	noValue(?if c4a:solPreferred)
	(?if c4a:id ?if_id)	
	(?if c4a:refersTo ?config_a)
	(?if c4a:refersTo ?config_b)
	
	(?sol_a c4a:class ?class_a)
	(?sol_b c4a:class ?class_b)
	(?class_a rdf:type c4a:AccessibilityContext)
	(?class_b rdf:type c4a:AccessibilityContext)	
	equal(?class_a,c4a:output)
	equal(?class_b,c4a:task)
	notEqual(?config_a, ?config_b)
	->
	drop(4)
	(?config_b c4a:isActive "false")
	print('**** MATC_Res_ATContext **********')
	print('Configuration deactivated: ' ?sol_b)
	print('**********************************')	
]

[Res1aJustOnePreferred:
	(?conflict rdf:type c4a:Conflict)
	(?conflict c4a:class ?class)
	(?conflict c4a:refersTo ?config)
	(?config c4a:isActive "true")
	(?config c4a:refersTo ?sol)
	
	(?conflict c4a:refersTo ?config_b)
	(?config_b c4a:solPreferred "true")
	(?config_b c4a:isActive "true")
	(?config_b c4a:refersTo ?sol_b)
	
	(?if rdf:type c4a:InferredConfiguration)
	(?if c4a:id ?if_id)	
	(?if c4a:refersTo ?config)
	(?if c4a:refersTo ?config_b)
	notEqual(?config, ?config_b)
	noValue(?config c4a:solPreferred)
	->
	drop(3)
	(?config c4a:isActive "false")
	print('***********Resolution A MSC ******************')
	print('CONTEXT: ' ?if_id)
	print('conflict: ' ?class)
	print('deactivated solution: ' ?sol)	
	print('activated solution: ' ?sol_b)	
]

[Res1bTwoSolPreferred:
	(?conflict rdf:type c4a:Conflict)
	(?conflict c4a:class ?class)
	(?conflict c4a:refersTo ?config)
	(?conflict c4a:activated ?config)
	(?config c4a:isActive "true")
	(?config c4a:solPreferred "true")
	(?config c4a:refersTo ?sol)
	
	(?conflict c4a:refersTo ?config_b)
	(?conflict c4a:activated ?config_b)	
	(?config_b c4a:isActive "true")
	(?config_b c4a:solPreferred "true")
	(?config_b c4a:refersTo ?sol_b)
	
	(?if rdf:type c4a:InferredConfiguration)
	(?if c4a:id ?if_id)	
	(?if c4a:refersTo ?config)
	(?if c4a:refersTo ?config_b)
	notEqual(?config, ?config_b)
	noValue(?conflict c4a:deactivated ?x)
	->
	drop(4, 5)
	(?config c4a:isActive "false")
	(?conflict c4a:deactivated ?config)
	print('*********** Resolution B MSC ******************')
	print('CONTEXT: ' ?if_id)
	print('conflict: ' ?class)
	print('deactivated solution: ' ?sol)	
	print('activated solution: ' ?sol_b)	
]